name: Publish Website

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  STAGING_STORAGE_CONTAINER: "outlook-beta"
  STAGING_STORAGE_ACCOUNT: "markout"
  STAGING_CDN_RESOURCEGROUP: app-markout
  STAGING_CDN_PROFILE: "sierrasoftworks-markout"
  STAGING_CDN_ENDPOINT: "markout"

  LIVE_STORAGE_CONTAINER: "outlook"
  LIVE_STORAGE_ACCOUNT: "markout"
  LIVE_CDN_RESOURCEGROUP: app-markout
  LIVE_CDN_PROFILE: "sierrasoftworks-markout"
  LIVE_CDN_ENDPOINT: "markout"
  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4
      with:
        submodules: true
        
    - name: Setup Node.js environment
      uses: actions/setup-node@v2.2.0
      with:
        node-version: 14.x
    
    - name: Install Dependencies
      run: npm install
    
    - name: Test Package
      run: npm test
    
    - name: Build Package (Staging)
      run: |
        npm run build
        mkdir -p ./out/staging/
        cp manifest.beta.xml ./out/staging/manifest.xml
        cp -R assets ./out/staging/
        cp -R dist/* ./out/staging/
        
    - name: Upload Artifact (Staging)
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: site-staging
        # A file, directory or wildcard pattern that describes what to upload
        path: ./out/staging
    
    - name: Build Package (Live)
      run: |
        npm run build
        mkdir -p ./out/live/
        cp manifest.xml ./out/live/manifest.xml
        cp -R assets ./out/live/
        cp -R dist/* ./out/live/

    - name: Upload Artifact for Website (Live)
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: site-live
        # A file, directory or wildcard pattern that describes what to upload
        path: ./out/live

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.actor != 'dependabot[bot]'
    
    steps:
      - name: Download Artifacts for Website (Staging)
        uses: actions/download-artifact@v2
        with:
          name: site-staging
          path: ./out
          
      - name: Login to Azure
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Copy Artifacts to Storage
        uses: azure/CLI@1.0.4
        with:
          inlineScript: |
            echo "Uploading Site Contents"
            az storage blob sync --container '${{ env.STAGING_STORAGE_CONTAINER }}' --account-name ${{ env.STAGING_STORAGE_ACCOUNT }} --source ./out
      - name: Purge Azure CDN
        uses: azure/CLI@1.0.4
        with:
          inlineScript: |
            echo "Purging CDN"
            az cdn endpoint purge -g ${{ env.STAGING_CDN_RESOURCEGROUP }} -n ${{ env.STAGING_CDN_ENDPOINT }} --profile-name ${{ env.STAGING_CDN_PROFILE }} --content-paths '/*'
  
  deploy-live:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'push'
    
    steps:
      - name: Download Artifacts for Website (Live)
        uses: actions/download-artifact@v2
        with:
          name: site-live
          path: ./out
          
      - name: Login to Azure
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Copy Artifacts to Storage
        uses: azure/CLI@1.0.4
        with:
          inlineScript: |
            echo "Uploading Site Contents"
            az storage blob sync --container '${{ env.LIVE_STORAGE_CONTAINER }}' --account-name ${{ env.LIVE_STORAGE_ACCOUNT }} --source ./out
      - name: Purge Azure CDN
        uses: azure/CLI@1.0.4
        with:
          inlineScript: |
            echo "Purging CDN"
            az cdn endpoint purge -g ${{ env.LIVE_CDN_RESOURCEGROUP }} -n ${{ env.LIVE_CDN_ENDPOINT }} --profile-name ${{ env.LIVE_CDN_PROFILE }} --content-paths '/*'
